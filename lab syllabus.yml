dynamic_syllabus:
  journey_title: "Multi-Cloud Kubernetes Integrated with GitOps via GitLab"

  learning_outcome: |
    By the end of this journey, you will:
    - Architect and deploy Kubernetes clusters across multiple cloud providers.
    - Integrate GitOps workflows for multi-cluster management using GitLab CI/CD.
    - Standardize deployments with declarative infrastructure and application configuration.
    - Apply security, scaling, and lifecycle best practices for multi-cloud Kubernetes operations.

  modules:
    - module_number: 1
      module_title: "Foundations of Multi-Cloud Kubernetes Architecture"
      objective: "Understand the principles and design patterns for multi-cloud Kubernetes."
      topics:
        - "Multi-cloud architecture fundamentals"
        - "Kubernetes as a platform abstraction layer"
        - "Control plane and data plane considerations"

      conceptual_deep_dive: |
        Multi-cloud strategies leverage multiple cloud providers to avoid vendor lock-in, improve resilience, and optimize performance and cost. Kubernetes provides a consistent abstraction layer for deploying and managing applications across heterogeneous cloud infrastructures. Successful multi-cloud Kubernetes design requires careful consideration of cluster deployment models (federated vs. independent clusters), networking, and security policies.

      hands_on_lab:
        assumptions: |
          - Access to at least two cloud accounts (e.g., AWS and GCP or Azure).
        dependencies: |
          - CLI tools: kubectl, eksctl, gcloud, az, helm, terraform (optional for IaC)
        steps: |
          - Deploy Kubernetes clusters on two different cloud providers.
          - Validate cluster connectivity and basic configuration.

      architectural_patterns: |
        - Separate control planes per cloud provider with unified GitOps management.
        - Regionalized cluster deployment for latency optimization and redundancy.

      architectural_anti_patterns: |
        - Direct inter-cluster communication without secure service meshes.
        - Manual configurations diverging across cloud providers.

      best_practices: |
        - Use a central declarative repository for all cluster configurations.
        - Automate cluster provisioning and lifecycle management.

      checkpoint:
        question: "Why is Kubernetes often chosen as a multi-cloud abstraction platform?"
        answer: |
          Kubernetes abstracts infrastructure differences, offering a consistent API and operational model across cloud providers, thus enabling portability and reducing the complexity of managing diverse environments.

      major_terms_summary:
        - "Multi-Cloud"
        - "Control Plane / Data Plane"
        - "Cluster Federation"

    - module_number: 2
      module_title: "Introduction to GitOps Principles and GitLab CI/CD"
      objective: "Learn the fundamentals of GitOps and how GitLab enables GitOps workflows."
      topics:
        - "GitOps core concepts: declarative, pull-based operations"
        - "GitLab CI/CD pipeline basics for infrastructure"
        - "State reconciliation and desired vs. actual state"

      conceptual_deep_dive: |
        GitOps is the practice of using Git as the single source of truth for declarative infrastructure and application configuration. By leveraging GitLab CI/CD, changes are automated from commit to deployment with built-in version control, rollback, and audit capabilities. This approach ensures repeatability, security, and agility in infrastructure and application operations.

      hands_on_lab:
        assumptions: |
          - GitLab project created with CI/CD enabled.
        dependencies: |
          - GitLab Runner
          - FluxCD or ArgoCD for GitOps agents (optional but recommended)
        steps: |
          - Create a GitLab repository for Kubernetes manifests.
          - Set up basic CI/CD pipeline to validate manifests (kubectl dry-run, kubeval).

      architectural_patterns: |
        - Single-source-of-truth repositories with environment folders (e.g., dev/stage/prod).
        - Pipeline-driven validations before deployments.

      architectural_anti_patterns: |
        - Out-of-band cluster changes not reflected in Git repositories.
        - Manual deployments bypassing CI/CD pipelines.

      best_practices: |
        - Implement branch protection and mandatory code reviews.
        - Use Git tags or commits as release versions.

      checkpoint:
        question: "What are the benefits of pull-based deployments in a GitOps model?"
        answer: |
          Pull-based models ensure that clusters autonomously reconcile their state with the desired configuration in Git, reducing human error and improving auditability, security, and scalability.

      major_terms_summary:
        - "GitOps"
        - "FluxCD / ArgoCD"
        - "State Reconciliation"

    - module_number: 3
      module_title: "Deploying and Managing Applications Across Multi-Cloud Clusters"
      objective: "Standardize application deployments to multiple Kubernetes clusters via GitOps."
      topics:
        - "Multi-cluster deployment strategies"
        - "Namespace and resource management"
        - "Deployment pipelines targeting multiple environments"

      conceptual_deep_dive: |
        Managing application lifecycles in a multi-cloud Kubernetes environment requires standardization to avoid configuration drift. GitOps ensures that all cluster environments are treated declaratively, with applications deployed consistently across clusters based on Git commits and pipeline triggers.

      hands_on_lab:
        assumptions: |
          - Multi-cloud Kubernetes clusters deployed and reachable.
        dependencies: |
          - Helm for package management (optional but recommended)
        steps: |
          - Configure GitLab CI/CD pipelines to deploy the same application across multiple clusters.
          - Use environment-specific configurations for regional or cloud-specific deployments.

      architectural_patterns: |
        - Environment-based manifest overlays (e.g., Kustomize, Helm values).
        - Pipeline parameterization based on environment variables.

      architectural_anti_patterns: |
        - Duplicate manifest files for each environment.
        - Hardcoded cluster details in pipelines.

      best_practices: |
        - Use templating and overlays to manage differences between environments.
        - Automate validation and testing before multi-cluster rollouts.

      checkpoint:
        question: "How can you ensure configuration consistency across multiple Kubernetes clusters?"
        answer: |
          By maintaining a centralized Git repository with declarative configurations and automating deployments via GitOps pipelines, configuration consistency is ensured, reducing the risk of drift and operational overhead.

      major_terms_summary:
        - "Multi-Cluster Deployment"
        - "Helm Charts / Kustomize"
        - "Pipeline Parameterization"

    - module_number: 4
      module_title: "Advanced GitOps Automation and Security Considerations"
      objective: "Implement advanced GitOps features like auto-syncing, validation gates, and secure pipelines."
      topics:
        - "Automatic syncing and self-healing clusters"
        - "Policy-as-code for deployment gates"
        - "Secrets management in GitOps workflows"

      conceptual_deep_dive: |
        As GitOps practices mature, automation and security become critical. Auto-syncing ensures clusters detect and apply changes quickly. Policy-as-code tools like OPA (Open Policy Agent) enable pre-deployment validations. Secrets management solutions such as HashiCorp Vault or SealedSecrets ensure that sensitive information is managed securely.

      hands_on_lab:
        assumptions: |
          - GitLab pipelines configured for basic deployments.
        dependencies: |
          - OPA Gatekeeper (for policy enforcement)
          - SealedSecrets Controller (for secrets management)
        steps: |
          - Implement auto-sync features for Kubernetes resources.
          - Apply policy validations and secrets encryption within GitOps workflows.

      architectural_patterns: |
        - Policy-as-code to enforce governance.
        - External secrets management integration.

      architectural_anti_patterns: |
        - Hardcoded secrets in Git repositories.
        - No policy checks before deployments.

      best_practices: |
        - Regularly scan Git repositories and pipelines for security vulnerabilities.
        - Implement cluster-scoped and namespace-scoped RBAC policies.

      checkpoint:
        question: "Why is external secrets management preferred over hardcoded Kubernetes Secrets?"
        answer: |
          Hardcoded secrets in Kubernetes are not encrypted by default and are vulnerable if improperly configured. External secrets managers provide encryption, access control, and auditability, thus improving security posture.

      major_terms_summary:
        - "OPA (Open Policy Agent)"
        - "SealedSecrets"
        - "Auto-Syncing"

  estimated_timeline:
    per_session_estimate_hours: "2–3 hours"
    notes: |
      Each session typically includes:
      - 20–30 minutes conceptual walkthrough
      - 1–2 hours hands-on guided lab
      - Troubleshooting, Q&A, and real-world use case discussion

  end_state: |
    - A fully operational multi-cloud Kubernetes setup.
    - GitLab CI/CD pipelines managing application deployments declaratively.
    - Secure, automated, and consistent GitOps workflows across cloud environments.

capstone_project: |
  Architect and implement a resilient, multi-cloud GitOps platform:
  - Deploy Kubernetes clusters across two cloud providers (e.g., AWS EKS and GCP GKE).
  - Configure GitLab CI/CD pipelines for GitOps-driven application deployment.
  - Implement policy-as-code validation and secure secrets management.
  - Demonstrate a full deployment cycle with rollback and auditing features.